# Environment Configuration for sanmcp MCP Integration
# Copy this file to .env.mcp and update with your specific values

# =============================================================================
# MCP Server Configuration (matches bayer-int/mcp-servers requirements)
# =============================================================================


# PostgreSQL MCP Server Configuration
# Option 1: AWS Secrets Manager (Recommended for production)
SECRET_ID=your-rds-secret-id-here

# Option 2: Direct PostgreSQL connection (for development)
# PG_HOST=your-postgresql-host
# PG_PORT=5432
# PG_USER=your-username
# PG_PASSWORD=your-password
# PG_DBNAME=your-database




# Security and Performance Settings
READ_ONLY_CONNECTION=true  # Set to false to allow write operations
DEBUG=false               # Set to true for detailed logging

# =============================================================================
# AWS Configuration (for Lambda deployment and Secrets Manager)
# =============================================================================

# AWS Region
AWS_DEFAULT_REGION=us-east-1

# AWS Credentials (if not using IAM roles)
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key

# =============================================================================
# ML Service Integration Settings  
# =============================================================================

# Service identification
ML_SERVICE_NAME=sanmcp
ML_SERVICE_OWNER=user:default/santosh5321

# MCP Client Configuration
MCP_SERVER_URL=http://localhost:8000/mcp
MCP_AUTH_TOKEN=  # Set for production deployments with authentication

# Connection and retry settings
MCP_TIMEOUT=30
MCP_RETRY_ATTEMPTS=3
MCP_MAX_ROWS=100


# =============================================================================
# Custom Environment Variables
# =============================================================================

githubkey=santosh122



# =============================================================================
# Development vs Production Settings
# =============================================================================

# Uncomment for local development
# DEBUG=true
# MCP_SERVER_URL=http://localhost:8000/mcp
# READ_ONLY_CONNECTION=false

# Uncomment for production deployment
# DEBUG=false  
# MCP_SERVER_URL=https://your-lambda-url.amazonaws.com/mcp
# MCP_AUTH_TOKEN=your-production-api-key
# READ_ONLY_CONNECTION=true

# =============================================================================
# FastMCP Framework Settings
# =============================================================================

# HTTP Transport settings
FASTMCP_TRANSPORT=streamable-http
FASTMCP_STATELESS=true

# =============================================================================
# Logging and Monitoring
# =============================================================================

# Python logging level
LOG_LEVEL=INFO

# AWS Lambda Powertools (used by MCP server)
POWERTOOLS_LOG_LEVEL=INFO
POWERTOOLS_SERVICE_NAME=sanmcp-mcp

# CloudWatch monitoring (if enabled)
# ENABLE_CLOUDWATCH_METRICS=true
# CLOUDWATCH_NAMESPACE=MLService/MCP

# =============================================================================
# Health Check and Testing
# =============================================================================

# Health check settings
HEALTH_CHECK_INTERVAL=300
ENABLE_HEALTH_CHECKS=true

# Test database queries

TEST_QUERY=SELECT 1 as health_check
DEFAULT_SCHEMA=public



# =============================================================================
# Security Notes
# =============================================================================

# 1. Never commit this file with real credentials to version control
# 2. Use AWS Secrets Manager in production for database credentials
# 3. Set READ_ONLY_CONNECTION=true unless write access is specifically needed
# 4. Enable DEBUG=false in production for performance and security
# 5. Use HTTPS URLs for MCP_SERVER_URL in production
# 6. Rotate MCP_AUTH_TOKEN regularly in production environments
